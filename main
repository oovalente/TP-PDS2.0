#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_native_dialog.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>

// variaveis globais
const float FPS = 60;
const int SCREEN_W = 830; //largura da tela
const int SCREEN_H = 570; //altura da tela

//variaveis allegro
ALLEGRO_DISPLAY *display = NULL;
ALLEGRO_TIMER *timer = NULL;
ALLEGRO_BITMAP *fundo = NULL;
ALLEGRO_FONT *fonte = NULL; // O nosso arquivo de fonte
ALLEGRO_EVENT_QUEUE *fila_eventos = NULL;
ALLEGRO_BITMAP *folha_sprite = NULL;


int main(){
	
	//define quando a tela sera atualizada
    int desenha = 1;
    //posicao da plataforma e quanto ela andara a cada disparo do timer, para coordenada X e Y
    int posx=250, dir_x=5;
    int posy=500, dir_y=5;

//----------------------- rotinas de inicializacao ---------------------------------------
   if(!al_init()) {
      fprintf(stderr, "failed to initialize allegro!\n");
      return -1;
   }
 
   timer = al_create_timer(1.0 / FPS);
   if(!timer) {
      fprintf(stderr, "failed to create timer!\n");
      return -1;
   }
 
   display = al_create_display(SCREEN_W, SCREEN_H);
   if(!display) {
      fprintf(stderr, "failed to create display!\n");
      al_destroy_timer(timer);
      return -1;
   }
   	//avisa o allegro que agora eu quero modificar as propriedades da tela
   al_set_target_bitmap(al_get_backbuffer(display));
	//colore a tela de preto (rgb(0,0,0))
   al_clear_to_color(al_map_rgb(0,0,0));
   
// ----------------------------- CREATING THE BITMAPS -----------------------------------
  //inicia imagem
    al_init_image_addon();
	
	fundo = al_load_bitmap("fundo.png");
  
   if(!fundo) {
      fprintf(stderr, "failed to create bitmaps!\n");
      al_destroy_display(display);
      al_destroy_timer(timer);
      return -1;
   }
   
    al_set_window_title(display, "Sprites");

    //carrega a folha de sprites na variavel. No caso a plataforma é a folha_sprite
    folha_sprite = al_load_bitmap("plataforma.png");
    if (!folha_sprite){
        fprintf(stderr, "failed to carregar sprites\n");
        al_destroy_timer(timer);
        al_destroy_display(display);
        al_destroy_event_queue(fila_eventos);
        return 0;
    }
    //usa a cor rosa como transparencia
    al_convert_mask_to_alpha(folha_sprite,al_map_rgb(255,0,255));

// ------------------------------------ TEXT ---------------------------------------------- 
  // Inicialização do add-on para uso de fontes
    al_init_font_addon();
 
    // Inicialização do add-on para uso de fontes True Type
    if (!al_init_ttf_addon()){
       fprintf(stderr, "failed to create font!\n");
      al_destroy_timer(timer);
      return -1;
    }
	
	 // Carregando o arquivo de fonte
    fonte = al_load_font("arial.ttf", 48, 0);
    if (!fonte){
        al_destroy_display(display);
		fprintf(stderr, "failed to create font!\n");
        return -1;
    }
   
	int pontos = 0;	
	char meutexto[20];
	
	sprintf(meutexto,"%d",pontos);
	al_draw_text(fonte, al_map_rgb(255, 255, 255), SCREEN_W*0.85, 220, 0, meutexto);
	
	int record = 20;	
	char meutexto2[20];
	
	sprintf(meutexto2,"%d",record);
	al_draw_text(fonte, al_map_rgb(255, 255, 255), SCREEN_W*0.85, 390, 0, meutexto2);
	
// --------------------------- CREATING THE EVENT QUEUE --------------------------------
	al_install_keyboard();
	
	fila_eventos = al_create_event_queue();
	if(!fila_eventos) {
      fprintf(stderr, "failed to create event_queue!\n");
      al_destroy_bitmap(fundo);
      al_destroy_display(display);
      al_destroy_timer(timer);
	  al_destroy_bitmap(folha_sprite);
      return -1;
   }
   //registra eventos do display em fila_eventos
   al_register_event_source(fila_eventos, al_get_display_event_source(display));
	//registra na fila de eventos que eu quero identificar quando o tempo alterou de t para t+1
   al_register_event_source(fila_eventos, al_get_timer_event_source(timer));
   //registra teclado na fila de eventos
   al_register_event_source(fila_eventos, al_get_keyboard_event_source());  
 
//---------------------------------------------------------------------------------------
   //atualiza a tela
	al_flip_display();
	//inicia o temporizador
	al_start_timer(timer);
	
   while(1)
   {
		//espera por um evento e o armazena na variavel de evento ev
	    ALLEGRO_EVENT evento;
 
		al_wait_for_event(fila_eventos, &evento);
		
		if(evento.type == ALLEGRO_EVENT_KEY_DOWN) {
			//verifica a tecla apertada, chama a funcao para testar se acertou a nota. Se sim, faz um sinal sonoro e aumenta um ponto. Se não, a tela para por 0.3 segundos e perde um ponto
			switch(evento.keyboard.keycode) {
			
			//se a tecla for o A
			case ALLEGRO_KEY_A:
			if(posx <= 70){
				posx = 70;
			}
			posx-=8*dir_x;
			break;
			//se a tecla for o D
			case ALLEGRO_KEY_D:
			if(posx >= 430){
				posx = 430;
			}
			posx+=8*dir_x;
			break;
			
			case ALLEGRO_KEY_ESCAPE:
			return 0;
			break;
			}
		}
		
		//se o tipo do evento for o disparo de um timer
        else if(evento.type == ALLEGRO_EVENT_TIMER){
            desenha=1;
        }
		
		//se teve eventos e foi um evento de fechar janela, encerra repetição
		else if(evento.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			return 0;
		}
		
		/* -- ATUALIZA TELA -- */
        if(desenha && al_is_event_queue_empty(fila_eventos)) {
 
            al_clear_to_color(al_map_rgb(0,0,0));
			
			//desenha fundo
			al_draw_bitmap(fundo, 10, 10, 0);
			//escrevo a pontuaçao na tela
			al_draw_text(fonte, al_map_rgb(255, 255, 255), SCREEN_W*0.85, 220, 0, meutexto);
			//escrevo o record na tela 
			al_draw_text(fonte, al_map_rgb(255, 255, 255), SCREEN_W*0.85, 390, 0, meutexto2);
		
            //desenha o quadrado na tela nas posicoes X e Y
            al_draw_bitmap(folha_sprite, posx, posy, 0);
 
           	//atualiza a tela
			al_flip_display();
 
            //zera flag para nao entrar aqui no proximo loop
            desenha = 0;
		}
   }
   
	//procedimentos de fim de jogo (fecha a tela, limpa a memoria, etc)
	al_destroy_font(fonte);
	al_destroy_bitmap(fundo);
	al_destroy_bitmap(folha_sprite);
	al_destroy_timer(timer);
	al_destroy_display(display);
 
   return 0;
}
